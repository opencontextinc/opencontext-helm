apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "opencontext.fullname" . }}-db-pool
  labels:
    {{- include "opencontext.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation"
    "helm.sh/resource-policy": "keep"
data:
  db-pool.yaml: |  
    # backend.database.knexConfig key is deliberately commented out. It's here to serve as a reference and for indentation purposes
    #backend:
      #database:
        #knexConfig:
          #pool:
            min: {{ .Values.app.database.connection.pool.min | default 0 }}
            max: {{ .Values.app.database.connection.pool.max | default 20 }}
            # 'acquireTimeoutMillis' is the number of milliseconds before a timeout occurs when acquiring a
            # connection from the pool. This is slightly different from connectionTimeout, because acquiring
            # a pool connection does not always involve making a new connection, and may include multiple retries.
            # when making a connection
            acquireTimeoutMillis: 60000   # 60 seconds
            # 'createTimeoutMillis` is the maximum number of milliseconds to wait trying to establish an
            # initial connection before retrying.
            createTimeoutMillis: 30000    # 30 seconds
            # 'idleTimeoutMillis' is the number of milliseconds a connection must sit idle in the pool
            # and not be checked out before it is automatically closed.
            idleTimeoutMillis: 60000      # 60 seconds
            # 'destroyTimeoutMillis' time before timing out a destroy query attempt
            #destroyTimeoutMillis: 5000
            # 'reapIntervalMillis' is the frequency to check for idle resources
            reapIntervalMillis: 1000
            # 'knex' uses a built-in retry strategy which does not implement backoff.
            # createRetryIntervalMillis is how long to idle after failed connection creation before trying again
            createRetryIntervalMillis: 200
            # The propagateCreateError is set to true by default in Knex and throws a TimeoutError if the first create connection to the database fails, 
            # preventing tarn (the connection pool manager) from re-connecting automatically.
            # Set this to false to prevent "Timeout acquiring a connection. The pool is probably full. Are you missing a .transacting(trx) call? error."
            propagateCreateError: false
