{{- $secretName := printf "%s-auth" (include "opencontext.fullname" .) }}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ $secretName }}
  labels:
    {{- include "opencontext.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation"
    "helm.sh/resource-policy": "keep"
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace $secretName) | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  # set $BACKEND_AUTH_KEYS to existing secret data or generate a random one when not exists
  {{- $backendAuthKeys := (get $secretData "BACKEND_AUTH_KEYS") | default (randAlphaNum 15) }}
  # set $AUTH_SESSION_SECRET to existing secret data or generate a random one when not exists
  {{- $authSessionSecret := (get $secretData "AUTH_SESSION_SECRET") | default (randAlphaNum 15) }}
  # generate 15 chars long random string, base64 encode it and then double-quote the result string.
  BACKEND_AUTH_KEYS: {{ $backendAuthKeys | b64enc | quote }}
  # generate 15 chars long random string, base64 encode it and then double-quote the result string.
  AUTH_SESSION_SECRET: {{ $authSessionSecret | b64enc | quote }}
  {{- if eq .Values.app.github.authType "token" }}
  GITHUB_TOKEN: {{ required ".Values.app.github.token is required when .Values.app.github.authType = token" .Values.app.github.token | b64enc | quote }}
  {{- end }}
  {{- if eq .Values.app.gitlab.authType "token" }}
  GITLAB_TOKEN: {{ required ".Values.app.gitlab.token is required when .Values.app.gitlab.authType = token" .Values.app.gitlab.token | b64enc | quote }}
  {{- end }}
  {{- if and .Values.app.bitbucket.enabled (eq .Values.app.bitbucket.authType "token") }}
  BITBUCKET_SECRET: {{ required ".Values.app.bitbucket.token is required when .Values.app.bitbucket.authType = token" .Values.app.bitbucket.token | b64enc | quote }}
  {{- else if and .Values.app.bitbucket.enabled (eq .Values.app.bitbucket.authType "appPassword") }}
  BITBUCKET_SECRET: {{ required ".Values.app.bitbucket.appAuth.appPassword is required when .Values.app.bitbucket.authType = appPassword" .Values.app.bitbucket.appAuth.appPassword | b64enc | quote }}
  {{- end }}
  {{- if .Values.app.pagerDuty.enabled }}
  PAGERDUTY_TOKEN: {{ required ".Values.app.pagerDuty.token is required when .Values.app.pagerDuty.enabled = true" .Values.app.pagerDuty.token | b64enc | quote }}
  {{- end }}
  {{- if .Values.app.auth.enabled }}
  GOOGLE_OAUTH_CLIENT_ID: {{ required ".Values.app.auth.provider.google.clientId is required when .Values.app.auth.enabled = true" .Values.app.auth.provider.google.clientId | b64enc | quote }}
  GOOGLE_OAUTH_CLIENT_SECRET: {{ required ".Values.app.auth.provider.google.clientSecret is required when .Values.app.auth.enabled = true" .Values.app.auth.provider.google.clientSecret | b64enc | quote }}
  {{- end }}
