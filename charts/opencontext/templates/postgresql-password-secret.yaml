apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ .Values.global.postgresql.auth.existingSecret }}
  labels:
    {{- include "opencontext.postgresql.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation"
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace .Values.global.postgresql.auth.existingSecret) | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  {{- if .Values.postgresql.enabled }}
  # set $pgPassword to autogenerated password
  {{- $pgPassword := (get $secretData "postgres-password") | default (randAlphaNum 15) }}
  postgres-password: {{ $pgPassword | b64enc | quote }}
  password: {{ $pgPassword | b64enc | quote }}
  {{- else }}
  # set $pgPassword to existing secret data
  {{- $pgPassword := (get $secretData "postgres-password") | default ( .Values.app.database.connection.password ) }}
  postgres-password: {{ $pgPassword | b64enc | quote }}
  password: {{ $pgPassword | b64enc | quote }}
  {{- end }}
